# Convert to MICE models to tidy format
models_hurdle_max_tidy <- mice::getfit(models_hurdle_max) %>%
lapply(function(fit) poissonreg::tidy(fit, type="all")) %>%
bind_rows()
models_hurdle_stepwise_tidy <- mice::getfit(models_hurdle_stepwise) %>%
lapply(function(fit) poissonreg::tidy(fit, type="all")) %>%
bind_rows()
models_hurdle_documentlvl_tidy <- mice::getfit(models_hurdle_documentlvl) %>%
lapply(function(fit) poissonreg::tidy(fit, type="all")) %>%
bind_rows()
# Step 2
# Convenience wrapper function around pool.scalar.
# pool.scalar also returns a "qhat" and "u" which are vectors,
# and we don't need them. Those vectors mess up the format of
# the summary that we want to compute later.
wrap.pool.scalar <- function(estimates, variances, n, k) {
pool_res <- mice::pool.scalar(estimates, variances, n = n, k = k)
return(as_tibble(list(
qbar = pool_res$qbar,
ubar = pool_res$ubar,
b = pool_res$b,
t = pool_res$t,
df = pool_res$df,
r = pool_res$r,
fmi = pool_res$fmi)))
}
# For each (term,type) pair, compute pooled univariate estimates using
# wrap.pool.scalar
models_hurdle_max_tidy_pooled <- models_hurdle_max_tidy %>%
group_by(term, type) %>%
reframe(wrap.pool.scalar(estimate, std.error^2, n=60, k=1)) %>%
mutate(estimate = qbar)
models_hurdle_stepwise_tidy_pooled <- models_hurdle_stepwise_tidy %>%
group_by(term, type) %>%
reframe(wrap.pool.scalar(estimate, std.error^2, n=60, k=1)) %>%
mutate(estimate = qbar)
models_hurdle_documentlvl_tidy_pooled <- models_hurdle_documentlvl_tidy %>%
group_by(term, type) %>%
reframe(wrap.pool.scalar(estimate, std.error^2, n=60, k=1)) %>%
mutate(estimate = qbar)
# Step 3
# Copy the pooled estimate calculations from the the MICE package
# https://github.com/amices/mice/blob/master/R/mipo.R#L69-L71
models_hurdle_max_tidy_smry <- models_hurdle_max_tidy_pooled %>% mutate(
std.error = sqrt(t),
statistic = estimate / std.error,
p.value = 2 * (pt(abs(statistic), pmax(df, 0.001), lower.tail = FALSE))) %>%
dplyr::select(term, type, estimate, std.error, statistic, df, p.value)
models_hurdle_stepwise_tidy_smry <- models_hurdle_stepwise_tidy_pooled %>% mutate(
std.error = sqrt(t),
statistic = estimate / std.error,
p.value = 2 * (pt(abs(statistic), pmax(df, 0.001), lower.tail = FALSE))) %>%
dplyr::select(term, type, estimate, std.error, statistic, df, p.value)
models_hurdle_documentlvl_tidy_smry <- models_hurdle_documentlvl_tidy_pooled %>% mutate(
std.error = sqrt(t),
statistic = estimate / std.error,
p.value = 2 * (pt(abs(statistic), pmax(df, 0.001), lower.tail = FALSE))) %>%
dplyr::select(term, type, estimate, std.error, statistic, df, p.value)
# extract zero or count part of the tidy hurdle models
models_hurdle_max_tidy_smry_zero <- models_hurdle_max_tidy_smry[models_hurdle_max_tidy_smry$type=="zero",]
models_hurdle_max_tidy_smry_count <- models_hurdle_max_tidy_smry[models_hurdle_max_tidy_smry$type=="count",]
models_hurdle_stepwise_tidy_smry_zero <- models_hurdle_stepwise_tidy_smry[models_hurdle_stepwise_tidy_smry$type=="zero",]
models_hurdle_stepwise_tidy_smry_count <- models_hurdle_stepwise_tidy_smry[models_hurdle_stepwise_tidy_smry$type=="count",]
models_hurdle_documentlvl_tidy_smry_zero <- models_hurdle_documentlvl_tidy_smry[models_hurdle_documentlvl_tidy_smry$type=="zero",]
models_hurdle_documentlvl_tidy_smry_count <- models_hurdle_documentlvl_tidy_smry[models_hurdle_documentlvl_tidy_smry$type=="count",]
# also tidy up non MICE models for consistency
model_hurdle_min_zero <- poissonreg::tidy(model_hurdle_min, type="all") %>% filter(type=="zero")
model_hurdle_min_count <- poissonreg::tidy(model_hurdle_min, type="all") %>% filter(type=="count")
model_hurdle_firmlvl_zero <- poissonreg::tidy(model_hurdle_firmlvl, type="all") %>% filter(type=="zero")
model_hurdle_firmlvl_count <- poissonreg::tidy(model_hurdle_firmlvl, type="all") %>% filter(type=="count")
model_hurdle_cntrylvl_zero <- poissonreg::tidy(model_hurdle_cntrylvl, type="all") %>% filter(type=="zero")
model_hurdle_cntrylvl_count <- poissonreg::tidy(model_hurdle_cntrylvl, type="all") %>% filter(type=="count")
## Exporting hurdle model results ------------------------------------------
# for R >= 4.2.2 run this bugfix https://gist.github.com/alexeyknorre/b0780836f4cec04d41a863a683f91b53
stargazer(
# specify models (these mostly serve as placeholders because the coefficents etc. need to be extracted manually for pooled regression)
model_hurdle_min, models_hurdle_documentlvl[[1]], model_hurdle_firmlvl,
model_hurdle_cntrylvl, models_hurdle_stepwise[[1]], models_hurdle_max[[1]],
model_hurdle_min, models_hurdle_documentlvl[[1]], model_hurdle_firmlvl,
model_hurdle_cntrylvl, models_hurdle_stepwise[[1]], models_hurdle_max[[1]],
dep.var.caption = "Dependent variable: hard human rights disclosure score",
dep.var.labels = "",
title = "Neg. binomial hurdle regression that models the relationship between human rights disclosure and performance<br>(1-6 are zero models, 7-12 are count models)",
type = "html",
out = "Outputs/reg_table_hurdle.html",
omit.stat = "theta",
coef = list(model_hurdle_min_zero$estimate,
models_hurdle_documentlvl_tidy_smry_zero$estimate,
model_hurdle_firmlvl_zero$estimate,
model_hurdle_cntrylvl_zero$estimate,
models_hurdle_stepwise_tidy_smry_zero$estimate,
models_hurdle_max_tidy_smry_zero$estimate,
model_hurdle_min_count$estimate,
models_hurdle_documentlvl_tidy_smry_count$estimate,
model_hurdle_firmlvl_count$estimate,
model_hurdle_cntrylvl_count$estimate,
models_hurdle_stepwise_tidy_smry_count$estimate,
models_hurdle_max_tidy_smry_count$estimate),
se = list(model_hurdle_min_zero$std.error,
models_hurdle_documentlvl_tidy_smry_zero$std.error,
model_hurdle_firmlvl_zero$std.error,
model_hurdle_cntrylvl_zero$std.error,
models_hurdle_stepwise_tidy_smry_zero$std.error,
models_hurdle_max_tidy_smry_zero$std.error,
model_hurdle_min_count$std.error,
models_hurdle_documentlvl_tidy_smry_count$std.error,
model_hurdle_firmlvl_count$std.error,
model_hurdle_cntrylvl_count$std.error,
models_hurdle_stepwise_tidy_smry_count$std.error,
models_hurdle_max_tidy_smry_count$std.error),
t = list(model_hurdle_min_zero$statistic,
models_hurdle_documentlvl_tidy_smry_zero$statistic,
model_hurdle_firmlvl_zero$statistic,
model_hurdle_cntrylvl_zero$statistic,
models_hurdle_stepwise_tidy_smry_zero$statistic,
models_hurdle_max_tidy_smry_zero$statistic,
model_hurdle_min_count$statistic,
models_hurdle_documentlvl_tidy_smry_count$statistic,
model_hurdle_firmlvl_count$statistic,
model_hurdle_cntrylvl_count$statistic,
models_hurdle_stepwise_tidy_smry_count$statistic,
models_hurdle_max_tidy_smry_count$statistic),
p = list(model_hurdle_min_zero$p.value,
models_hurdle_documentlvl_tidy_smry_zero$p.value,
model_hurdle_firmlvl_zero$p.value,
model_hurdle_cntrylvl_zero$p.value,
models_hurdle_stepwise_tidy_smry_zero$p.value,
models_hurdle_max_tidy_smry_zero$p.value,
model_hurdle_min_count$p.value,
models_hurdle_documentlvl_tidy_smry_count$p.value,
model_hurdle_firmlvl_count$p.value,
model_hurdle_cntrylvl_count$p.value,
models_hurdle_stepwise_tidy_smry_count$p.value,
models_hurdle_max_tidy_smry_count$p.value)
)
check_model(models_hd_max[[1]])
check_model(models_sd_max[[1]])
check_model(models_sd_documentlvl[[1]])
check_model(model_sd_firmlvl[[1]])
check_model(model_sd_firmlvl)
check_model(models_sd_max[[1]])
models_hurdle_stepwise_tidy_smry
models_hurdle_stepwise_tidy_smry
models_hurdle_stepwise_tidy_smry_count
check_model(model_hurdle_firmlvl)
check_model(model_hurdle_firmlvl_zero)
check_model(models_hurdle_max_tidy_smry)
check_model(models_hurdle_documentlvl)
d_depvar_table
d_depvar_table
View(d_depvar_table)
d_depvar_table <- d %>%
select(coding_category:hd_disaggregated) %>%
group_by(coding_category) %>%
reframe(across(
everything(),
# display the sum of companies on the left and the percentage on the right
~paste0(
sum(., na.rm=T),
" / ",
round(100*sum(., na.rm=T)/60, digits = 1),
"%"
)))
# Setting up the environment and data import-------------------------------
# Clear the R environment
rm(list=ls())
# Set the working directory (should be redundant thanks to .Rproj)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Import data
country_coding <- import("country_coding.xlsx")
d <- import("coding_sheet.xlsx")
# Data manipulation -------------------------------------------------------
# defining factor levels in correct order for HR categories
d$coding_category <- factor(
d$coding_category,
levels = c(
"Investment HR incorporation",
"Supplier HR screening",
"Employee HR training",
"Non-discrimination",
"Freedom of association",
"Child labor",
"Forced labor",
"Security practices",
"Indigenous rights",
"HR impact assessment",
"Remediation"
))
# adjusting the data type of some variables and adding country level variables
d <- d %>%
mutate(across(assurance:hr_statement, ~as.numeric(.))) %>%
# there is no distinction between mainland China and HK possible, so the two are merged
mutate(headquarters_country = if_else(headquarters_country=="Hong Kong","China",headquarters_country)) %>%
left_join(country_coding,by=c("headquarters_country"="Country")) %>%
mutate(mandatory_regulation_level = as.numeric(mandatory_regulation_level),
soft_law_level = as.numeric(soft_law_level),
ROA = Profit/Assets)
d_depvar_table <- d %>%
select(coding_category:hd_disaggregated) %>%
group_by(coding_category) %>%
reframe(across(
everything(),
# display the sum of companies on the left and the percentage on the right
~paste0(
sum(., na.rm=T),
" / ",
round(100*sum(., na.rm=T)/60, digits = 1),
"%"
)))
d_depvar_table
d_depvar_table <- d %>%
select(coding_category:hd_disaggregated) %>%
group_by(coding_category) %>%
reframe(across(
everything(),
# display the sum of companies on the left and the percentage on the right
~paste0(
sum(., na.rm=T),
" / ",
round(100*sum(., na.rm=T)/n_distinct(company_name), digits = 1),
"%"
)))
d_depvar_table <- d %>%
select(coding_category:hd_disaggregated, company_name) %>%
group_by(coding_category) %>%
reframe(across(
everything(),
# display the sum of companies on the left and the percentage on the right
~paste0(
sum(., na.rm=T),
" / ",
round(100*sum(., na.rm=T)/n_distinct(company_name), digits = 1),
"%"
)))
d_depvar_table <- d %>%
select(coding_category:hd_disaggregated, company_name) %>%
group_by(coding_category) %>%
reframe(across(
c(everything(), -company_name),
# display the sum of companies on the left and the percentage on the right
~paste0(
sum(., na.rm=T),
" / ",
round(100*sum(., na.rm=T)/n_distinct(company_name), digits = 1),
"%"
)))
d_depvar_table
d_depvar_table %>%
flextable::as_flextable() %>%
flextable::save_as_docx(path="Outputs/table_depvar.docx")
d_depvar_table %>%
flextable::as_flextable() %>%
flextable::save_as_docx(path="Outputs/table_depvar.docx")
p_hrp <- ggplot(data=d) +
geom_histogram(aes(x=HRP), binwidth = 1, fill="grey20") +
geom_vline(aes(xintercept=mean(HRP)),linetype = "11",linewidth=1.2)+
scale_x_continuous(breaks=seq(-70,0, by=5)) +
labs(title="Univariate distribution of the human rights performance index",
subtitle="The vertical line marks the overall average",
x="human rights performance index",
y="count of companies") +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background = element_blank(),
plot.margin = margin(.1,.1,.1,.1, "inches"),
panel.grid.major.y = element_line(color="grey40"),
axis.ticks.y = element_line(color="grey40"))
ggsave("Outputs/plot_indep.png", plot=p_hrp, device="png", width=7, height=4)
d <- d %>%
group_by(company_name) %>%
mutate(sd_score = sum(!is.na(sd_score)),
hd_score = sum(
sum(!is.na(hd_data_present)),
sum(!is.na(hd_rel_to_peers)),
sum(!is.na(hd_rel_to_prev_period)),
sum(!is.na(hd_rel_to_targets)),
sum(!is.na(hd_abs_and_normalized)),
sum(!is.na(hd_disaggregated)))) %>%
select(
-coding_category,
-c(hd_data_present:hd_disaggregated)) %>%
filter(if_any(c(assurance,hr_report,hr_policy,hr_statement), ~!is.na(.))) %>%
distinct() %>%
mutate(HR_report = ifelse(hr_report==1|hr_policy==1|hr_statement==1, 1, 0))
d <- d %>%
select(
company_name,
HR_incident_count,
HRP_index,
headquarters_country,
sd_score,
hd_score,
assurance,
HR_report,
ROA,
logged_Assets,
soft_law_level,
mandatory_regulation_level)
# shorten variable names for the upcoming plots and analysis
d <- d %>%
rename(
hD = hd_score,
sD = sd_score,
HRP = HRP_index,
RL = report_length,
ASSUR = assurance,
HRR = HR_report,
lnA = logged_Assets,
ROA = ROA,
mREG = mandatory_regulation_level,
sLAW = soft_law_level,
CNTRY = headquarters_country
)
d <- d %>%
rename(
hD = hd_score,
sD = sd_score,
HRP = HRP_index,
#RL = report_length,
ASSUR = assurance,
HRR = HR_report,
lnA = logged_Assets,
ROA = ROA,
mREG = mandatory_regulation_level,
sLAW = soft_law_level,
CNTRY = headquarters_country
)
p_hrp <- ggplot(data=d) +
geom_histogram(aes(x=HRP), binwidth = 1, fill="grey20") +
geom_vline(aes(xintercept=mean(HRP)),linetype = "11",linewidth=1.2)+
scale_x_continuous(breaks=seq(-70,0, by=5)) +
labs(title="Univariate distribution of the human rights performance index",
subtitle="The vertical line marks the overall average",
x="human rights performance index",
y="count of companies") +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background = element_blank(),
plot.margin = margin(.1,.1,.1,.1, "inches"),
panel.grid.major.y = element_line(color="grey40"),
axis.ticks.y = element_line(color="grey40"))
ggsave("Outputs/plot_indep.png", plot=p_hrp, device="png", width=7, height=4)
p_hrp <- ggplot(data=d) +
geom_histogram(aes(x=HRP), binwidth = 1, fill="grey30") +
geom_vline(aes(xintercept=mean(HRP)),linetype = "11",linewidth=1.2)+
scale_x_continuous(breaks=seq(-70,0, by=5)) +
labs(title="Univariate distribution of the human rights performance index",
subtitle="The vertical line marks the overall average",
x="human rights performance index",
y="count of companies") +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background = element_blank(),
plot.margin = margin(.1,.1,.1,.1, "inches"),
panel.grid.major.y = element_line(color="grey40"),
axis.ticks.y = element_line(color="grey40"))
ggsave("Outputs/plot_indep.png", plot=p_hrp, device="png", width=7, height=4)
p_hrp <- ggplot(data=d) +
geom_histogram_pattern(aes(x=HRP), binwidth = 1, pattern=1) +
#geom_histogram(aes(x=HRP), binwidth = 1, fill="grey30") +
geom_vline(aes(xintercept=mean(HRP)),linetype = "11",linewidth=1.2)+
scale_x_continuous(breaks=seq(-70,0, by=5)) +
labs(title="Univariate distribution of the human rights performance index",
subtitle="The vertical line marks the overall average",
x="human rights performance index",
y="count of companies") +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background = element_blank(),
plot.margin = margin(.1,.1,.1,.1, "inches"),
panel.grid.major.y = element_line(color="grey40"),
axis.ticks.y = element_line(color="grey40"))
ggsave("Outputs/plot_indep.png", plot=p_hrp, device="png", width=7, height=4)
vignette("ggpattern")
vignette(ggpattern)
vignette(package =ggpattern)
vignette(package ="ggpattern")
?geom_histogram_pattern
p_hrp <- ggplot(data=d) +
geom_histogram_pattern(aes(x=HRP), binwidth = 1) +
#geom_histogram(aes(x=HRP), binwidth = 1, fill="grey30") +
geom_vline(aes(xintercept=mean(HRP)),linetype = "11",linewidth=1.2)+
scale_x_continuous(breaks=seq(-70,0, by=5)) +
labs(title="Univariate distribution of the human rights performance index",
subtitle="The vertical line marks the overall average",
x="human rights performance index",
y="count of companies") +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background = element_blank(),
plot.margin = margin(.1,.1,.1,.1, "inches"),
panel.grid.major.y = element_line(color="grey40"),
axis.ticks.y = element_line(color="grey40"))
ggsave("Outputs/plot_indep.png", plot=p_hrp, device="png", width=7, height=4)
p_hrp <- ggplot(data=d) +
geom_histogram_pattern(aes(x=HRP), binwidth = 1, pattern="circle") +
#geom_histogram(aes(x=HRP), binwidth = 1, fill="grey30") +
geom_vline(aes(xintercept=mean(HRP)),linetype = "11",linewidth=1.2)+
scale_x_continuous(breaks=seq(-70,0, by=5)) +
labs(title="Univariate distribution of the human rights performance index",
subtitle="The vertical line marks the overall average",
x="human rights performance index",
y="count of companies") +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background = element_blank(),
plot.margin = margin(.1,.1,.1,.1, "inches"),
panel.grid.major.y = element_line(color="grey40"),
axis.ticks.y = element_line(color="grey40"))
ggsave("Outputs/plot_indep.png", plot=p_hrp, device="png", width=7, height=4)
p_hrp <- ggplot(data=d) +
geom_histogram_pattern(aes(x=HRP), binwidth = 1, pattern_density=.02) +
#geom_histogram(aes(x=HRP), binwidth = 1, fill="grey30") +
geom_vline(aes(xintercept=mean(HRP)),linetype = "11",linewidth=1.2)+
scale_x_continuous(breaks=seq(-70,0, by=5)) +
labs(title="Univariate distribution of the human rights performance index",
subtitle="The vertical line marks the overall average",
x="human rights performance index",
y="count of companies") +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background = element_blank(),
plot.margin = margin(.1,.1,.1,.1, "inches"),
panel.grid.major.y = element_line(color="grey40"),
axis.ticks.y = element_line(color="grey40"))
ggsave("Outputs/plot_indep.png", plot=p_hrp, device="png", width=7, height=4)
p_hrp <- ggplot(data=d) +
geom_histogram_pattern(aes(x=HRP), binwidth = 1, pattern_density=.02) +
#geom_histogram(aes(x=HRP), binwidth = 1, fill="grey30") +
geom_vline(aes(xintercept=mean(HRP)),linetype = "11",linewidth=1.2)+
scale_x_continuous(breaks=seq(-70,0, by=5)) +
labs(title="Univariate distribution of the human rights performance index",
subtitle="The vertical line marks the overall average",
x="human rights performance index",
y="count of companies") +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background = element_blank(),
plot.margin = margin(.1,.1,.1,.1, "inches"),
panel.grid.major.y = element_line(color="grey40"),
axis.ticks.y = element_line(color="grey40"))
ggsave("Outputs/plot_indep.png", plot=p_hrp, device="png", width=7, height=4)
p_hrp <- ggplot(data=d) +
geom_histogram_pattern(aes(x=HRP), binwidth = 1, pattern_density=.01) +
#geom_histogram(aes(x=HRP), binwidth = 1, fill="grey30") +
geom_vline(aes(xintercept=mean(HRP)),linetype = "11",linewidth=1.2)+
scale_x_continuous(breaks=seq(-70,0, by=5)) +
labs(title="Univariate distribution of the human rights performance index",
subtitle="The vertical line marks the overall average",
x="human rights performance index",
y="count of companies") +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background = element_blank(),
plot.margin = margin(.1,.1,.1,.1, "inches"),
panel.grid.major.y = element_line(color="grey40"),
axis.ticks.y = element_line(color="grey40"))
ggsave("Outputs/plot_indep.png", plot=p_hrp, device="png", width=7, height=4)
p_hrp <- ggplot(data=d) +
geom_histogram_pattern(aes(x=HRP), binwidth = 1, pattern_density=.005) +
#geom_histogram(aes(x=HRP), binwidth = 1, fill="grey30") +
geom_vline(aes(xintercept=mean(HRP)),linetype = "11",linewidth=1.2)+
scale_x_continuous(breaks=seq(-70,0, by=5)) +
labs(title="Univariate distribution of the human rights performance index",
subtitle="The vertical line marks the overall average",
x="human rights performance index",
y="count of companies") +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background = element_blank(),
plot.margin = margin(.1,.1,.1,.1, "inches"),
panel.grid.major.y = element_line(color="grey40"),
axis.ticks.y = element_line(color="grey40"))
ggsave("Outputs/plot_indep.png", plot=p_hrp, device="png", width=7, height=4)
p_hrp <- ggplot(data=d) +
geom_histogram(aes(x=HRP), binwidth = 1, fill="grey30") +
geom_vline(aes(xintercept=mean(HRP)),linetype = "11",linewidth=1.2)+
scale_x_continuous(breaks=seq(-70,0, by=5)) +
labs(title="Univariate distribution of the human rights performance index",
subtitle="The vertical line marks the overall average",
x="human rights performance index",
y="count of companies") +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background = element_blank(),
plot.margin = margin(.1,.1,.1,.1, "inches"),
panel.grid.major.y = element_line(color="grey40"),
axis.ticks.y = element_line(color="grey40"))
ggsave("Outputs/plot_indep.png", plot=p_hrp, device="png", width=7, height=4)
renv::snapshot()
